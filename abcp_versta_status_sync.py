import requests
import json
import sys
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
import time
from dateutil.parser import parse

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO").upper(),
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[logging.StreamHandler(sys.stdout)]
)
log = logging.getLogger(__name__)

load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
ABCP_BASE_URL = os.getenv("ABCP_BASE_URL") or ""
ABCP_ORDER_UPDATE_URL = os.getenv("ABCP_ORDER_UPDATE_URL") or ""
VERSTA_API_URL = os.getenv("VERSTA_API_URL") or ""
ABCP_USER = os.getenv("ABCP_USER")
ABCP_PSW = os.getenv("ABCP_PSW")
VERSTA_TOKEN = os.getenv("VERSTA_TOKEN")

HEADERS_VERSTA = {
    "Authorization": VERSTA_TOKEN,
    "Accept": "application/json"
}

EXCLUDED_STATUSES = {610}   # –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ

# –ß–µ—Ç–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π Versta ‚Üí ABCP (—Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ –ø–∞—Ä—ã master+sub)
VERSTA_TO_ABCP = {
    # === –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è ===
    (100, 6):  {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # CourierAssigned
    (100, 7):  {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # ParcelPickedUp
    (100, 8):  {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # CourierOnTheWay
    (100, 9):  {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # ParcelOnTheWay
    (100, 10): {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # ParcelInTheRecipientCity
    (100, 11): {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # ParcelHandedForDelivery

    # === –î–æ—Å—Ç–∞–≤–ª–µ–Ω ===
    (200, 12): {"id": 405205, "name": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"},      # ParcelInPickupPoint

    # === –ü–æ–ª—É—á–µ–Ω ===
    (700, 90): {"id": 385106, "name": "–ü–æ–ª—É—á–µ–Ω"},        # Finished

    # === –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ===
    (800, 95): {"id": 385107, "name": "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è"},   # RefuseOfDelivery
}

# –ë—É–¥—É—â–∏–µ fallback-–ø—Ä–∞–≤–∏–ª–∞ –º–æ–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
FALLBACK_VERSTA_TO_ABCP = {
    # (100, None): {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # Transportation (—Ä–µ–∑–µ—Ä–≤)
    # (200, None): {"id": 405205, "name": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"},     # Delivery (—Ä–µ–∑–µ—Ä–≤)
}

def log_mapping_table():
    """–í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π Versta ‚Üí ABCP –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞."""
    log.info("\nüìã –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ Versta ‚Üí ABCP:")
    for (master, sub), abcp in VERSTA_TO_ABCP.items():
        log.info(f"  Versta: master={master}, sub={sub} ‚Üí ABCP: {abcp['name']} (ID {abcp['id']})")

def map_status(master_status, sub_status):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å ABCP –ø–æ masterStatus –∏ subStatus Versta."""
    key = (master_status, sub_status)
    if key in VERSTA_TO_ABCP:
        mapped = VERSTA_TO_ABCP[key]
        log.debug(f"üîó –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ Versta {master_status}/{sub_status} ‚Üí ABCP {mapped['name']} (ID {mapped['id']})")
        return mapped
    
    # üîí –ü–æ–∫–∞ fallback –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å:
    # if (master_status, None) in FALLBACK_VERSTA_TO_ABCP:
    #     mapped = FALLBACK_VERSTA_TO_ABCP[(master_status, None)]
    #     log.debug(f"üîó Fallback: Versta {master_status}/None ‚Üí ABCP {mapped['name']} (ID {mapped['id']})")
    #     return mapped

    return None

# VERSTA_TO_ABCP = {
#     # === –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ===
#     (0, None): {"id": 409381, "name": "–ù–æ–≤—ã–π"},  # New - –ù–æ–≤—ã–π –∑–∞–∫–∞–∑

#     # === –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) ===
#     (10, None): {"id": 365188, "name": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"},  # Waiting - –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
#     (20, None): {"id": 365188, "name": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"},  # Approval - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
#     (30, None): {"id": 365188, "name": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"},  # Payment - –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã

#     # === –í —Ä–∞–±–æ—Ç–µ ===
#     (40, None): {"id": 365189, "name": "–í —Ä–∞–±–æ—Ç–µ"},  # Fulfilment - –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è
#     (50, None): {"id": 365189, "name": "–í —Ä–∞–±–æ—Ç–µ"},  # TransferringToVendor - –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
#     (60, None): {"id": 365189, "name": "–í —Ä–∞–±–æ—Ç–µ"},  # TransferredToVendor - –ü–µ—Ä–µ–¥–∞–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫—É

#     # === –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è ===
#     (100, 6):  {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # CourierAssigned - –ö—É—Ä—å–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω
#     (100, 7):  {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # ParcelPickedUp - –ì—Ä—É–∑ –∑–∞–±—Ä–∞–Ω
#     (100, 8):  {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # CourierOnTheWay - –ö—É—Ä—å–µ—Ä –≤ –ø—É—Ç–∏
#     (100, 9):  {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # ParcelOnTheWay - –ü–æ—Å—ã–ª–∫–∞ –≤ –ø—É—Ç–∏
#     (100, 10): {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # ParcelInTheRecipientCity - –ü–æ—Å—ã–ª–∫–∞ –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
#     (100, 11): {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # ParcelHandedForDelivery - –ü–æ—Å—ã–ª–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
#     (100, None): {"id": 405204, "name": "–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è"},  # Transportation - –î–æ—Å—Ç–∞–≤–∫–∞

#     # === –î–æ—Å—Ç–∞–≤–ª–µ–Ω ===
#     (200, 12): {"id": 405205, "name": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"},  # ParcelInPickupPoint - –ü–æ—Å—ã–ª–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –ü–í–ó
#     (200, None): {"id": 405205, "name": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"},  # Delivery - –í—Ä—É—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏

#     # === –ü–æ–ª—É—á–µ–Ω ===
#     (700, 90): {"id": 385106, "name": "–ü–æ–ª—É—á–µ–Ω"},  # Finished - –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω
#     (700, None): {"id": 385106, "name": "–ü–æ–ª—É—á–µ–Ω"},  # Finished - –ó–∞–≤–µ—Ä—à–µ–Ω —Å –≤—Ä—É—á–µ–Ω–∏–µ–º

#     # === –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ===
#     (800, 95): {"id": 385107, "name": "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è"},  # RefuseOfDelivery - –û—Ç–∫–∞–∑ –æ—Ç –≤—Ä—É—á–µ–Ω–∏—è
#     (800, None): {"id": 385107, "name": "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è"},  # NotDelivered - –í–æ–∑–≤—Ä–∞—Ç (–Ω–µ –≤—Ä—É—á–µ–Ω–æ)
#     (300, None): {"id": 385107, "name": "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è"},  # Returning - –≤–æ–∑–≤—Ä–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

#     # === –ü—Ä–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ ===
#     (500, None): {"id": 409382, "name": "–ü—Ä–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"},  # ProblemDetected

#     # === –û—Ç–º–µ–Ω—ã ===
#     (600, None): {"id": 404714, "name": "–û—Ç–º–µ–Ω–µ–Ω –ø–æ –Ω–µ–æ–ø–ª–∞—Ç–µ"},  # Cancelled
#     ("Cancelled", None): {"id": 404714, "name": "–û—Ç–º–µ–Ω–µ–Ω –ø–æ –Ω–µ–æ–ø–ª–∞—Ç–µ"},  # Cancelled (—Å—Ç—Ä–æ–∫–æ–≤—ã–π)

#     # === –í–µ—Ä–Ω—É–ª—Å—è –≤ –¢–ö ===
#     (60, None): {"id": 418655, "name": "–í–µ—Ä–Ω—É–ª—Å—è –≤ –¢–ö"},  # NotDelivered
#     ("NotDelivered", None): {"id": 418655, "name": "–í–µ—Ä–Ω—É–ª—Å—è –≤ –¢–ö"},  # NotDelivered (—Å—Ç—Ä–æ–∫–æ–≤—ã–π)

#     # === –í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏–Ω—è—Ç ===
#     ("ReturnAccepted", None): {"id": 418656, "name": "–í–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏–Ω—è—Ç"}  # ReturnAccepted
# }

# def get_date_range():
#     today = datetime.today()
#     prev = today.replace(day=1) - timedelta(days=1)
#     next_month = today.replace(day=28) + timedelta(days=4)
#     next_last = next_month.replace(day=calendar.monthrange(next_month.year, next_month.month)[1])
#     return prev.replace(day=1).strftime("%Y-%m-%d 00:00:00"), next_last.strftime("%Y-%m-%d 23:59:59")

def get_date_range():
    today = datetime.today()
    start_date = (today - timedelta(days=30)).strftime("%Y-%m-%d 00:00:00")
    end_date = today.strftime("%Y-%m-%d 23:59:59")
    return start_date, end_date

def fetch_abcp_orders(start_date, end_date):
    log.info(f"üì¶ –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ ABCP —Å {start_date} –ø–æ {end_date}...")

    all_orders = []
    skip = 0
    limit = 1000

    try:
        # 1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        count_params = {
            "userlogin": ABCP_USER,
            "userpsw": ABCP_PSW,
            "dateCreatedStart": start_date,
            "dateCreatedEnd": end_date,
            "format": "count"
        }
        resp_count = requests.get(ABCP_BASE_URL, params=count_params, timeout=30)
        resp_count.raise_for_status()
        total_count = int(resp_count.json().get("count", 0))
        log.info(f"üî¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {total_count}")

        # 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
        while skip < total_count:
            params = {
                "userlogin": ABCP_USER,
                "userpsw": ABCP_PSW,
                "format": "additional",
                "dateCreatedStart": start_date,
                "dateCreatedEnd": end_date,
                "limit": limit,
                "skip": skip,
                "desc": True
            }

            resp = requests.get(ABCP_BASE_URL, params=params, timeout=30)
            resp.raise_for_status()
            orders = resp.json()

            if not isinstance(orders, list) or not orders:
                break

            all_orders.extend(orders)
            log.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ (–≤—Å–µ–≥–æ: {len(all_orders)}/{total_count})")

            skip += limit

        log.info(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ ABCP –ø–æ–ª—É—á–µ–Ω–æ: {len(all_orders)}")
        with open("abcp_orders.json", "w", encoding="utf-8") as f:
            json.dump(all_orders, f, indent=2, ensure_ascii=False)
        return all_orders

    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ ABCP: {e}")
        return []

def fetch_versta_orders():
    log.info("üì¶ –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏–∑ Versta24...")
    try:
        resp = requests.get(VERSTA_API_URL, headers=HEADERS_VERSTA)
        resp.raise_for_status()
        data = resp.json()
        orders = data.get("orders", [])
        log.info(f"‚úÖ –ó–∞–∫–∞–∑—ã Versta24 —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(orders)} —à—Ç.")
        with open("versta_orders.json", "w", encoding="utf-8") as f:
            json.dump(orders, f, indent=2, ensure_ascii=False)
        return orders
    except Exception as e:
        log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ Versta: {e}")
        return []

def extract_abcp_ids(orders):
    return {str(order.get("number")) for order in orders if order.get("number")}

def build_versta_order_map(orders):
    grouped = {}
    for order in orders:
        cust_id = str(order.get("customerOrderId"))
        if not cust_id:
            continue
        grouped.setdefault(cust_id, []).append(order)

    result = {}

    for cust_id, group in grouped.items():
        def get_date(o):
            date_str = o.get("statusDate") or o.get("createDateTime")
            if not date_str:
                log.warning(f"‚ö† –ù–µ—Ç –¥–∞—Ç—ã –≤ –∑–∞–∫–∞–∑–µ {o.get('orderId')}, –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –≤—ã–±–æ—Ä–∞")
                return datetime.min
            try:
                return parse(date_str)
            except Exception:
                log.warning(f"‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {date_str} (order: {o.get('orderId')})")
                return datetime.min

        excluded = [o for o in group if o.get("status") in EXCLUDED_STATUSES or o.get("masterStatus") in EXCLUDED_STATUSES]
        if excluded:
            log.info(f"‚Ñπ –ò—Å–∫–ª—é—á–µ–Ω—ã –∑–∞–∫–∞–∑—ã –¥–ª—è customerOrderId={cust_id}: {[o.get('orderId') for o in excluded]}")

        active = [o for o in group if o not in excluded]
        relevant_orders = active if active else group
        latest_order = max(relevant_orders, key=get_date)
        result[cust_id] = latest_order

        log.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –∑–∞–∫–∞–∑ {latest_order.get('orderId')} –¥–ª—è customerOrderId={cust_id} "
                 f"—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{latest_order.get('statusName')}' –∏ –¥–∞—Ç–æ–π {latest_order.get('statusDate') or latest_order.get('createDateTime')}")

    return result

def build_abcp_status_map(orders):
    return {
        str(order.get("number")): (order["positions"][0]["status"] if order.get("positions") else "")
        for order in orders
    }

def analyze_matches(abcp_orders, versta_orders, test_order=None):
    abcp_ids = extract_abcp_ids(abcp_orders)
    versta_by_customer_id = build_versta_order_map(versta_orders)
    versta_ids = set(versta_by_customer_id.keys())

    if test_order:
        log.info(f"üîß –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑: {test_order}")
        abcp_ids = {str(test_order)} if str(test_order) in abcp_ids else set()
        versta_ids = {str(test_order)} if str(test_order) in versta_ids else set()
        versta_by_customer_id = {k: v for k, v in versta_by_customer_id.items() if k in versta_ids}

    common_ids = abcp_ids & versta_ids
    log.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:")
    log.info(f"‚Äî –ó–∞–∫–∞–∑–æ–≤ ABCP: {len(abcp_ids)}")
    log.info(f"‚Äî –ó–∞–∫–∞–∑–æ–≤ Versta: {len(versta_ids)}")
    log.info(f"‚úÖ –°–æ–≤–ø–∞–≤—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {len(common_ids)}")

    return common_ids, versta_by_customer_id

def find_orders_for_update(common_ids, abcp_statuses, versta_by_customer_id):
    to_update = []
    for order_id in sorted(common_ids):
        abcp_status_name = abcp_statuses.get(order_id, "").strip()
        versta_order = versta_by_customer_id.get(order_id)

        master_status = versta_order.get("masterStatus")
        sub_status = versta_order.get("statusCode") or versta_order.get("subStatus")
        try:
            sub_status = int(sub_status) if sub_status is not None else None
        except ValueError:
            log.warning(f"‚ö† subStatus –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {sub_status} (order {order_id})")

        mapped_status = map_status(master_status, sub_status)
        if not mapped_status:
            log.warning(f"‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: master={master_status}, sub={sub_status} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            continue

        if mapped_status["name"] != abcp_status_name:
            to_update.append({
                "order_id": order_id,
                "abcp_current": abcp_status_name,
                "versta_status": f"{versta_order.get('masterStatusName')} ({master_status}/{sub_status})",
                "abcp_new": mapped_status["name"],
                "abcp_new_id": mapped_status["id"]
            })
    return to_update

def update_abcp_order_positions(order, new_status_id):
    for i, pos in enumerate(order.get("positions", [])):
        pos_status = pos.get("status", "").strip()
        qty = float(pos.get("quantity", 0))
        sum_value = float(pos.get("priceOut", 0)) * qty
        pos_id = pos.get("id")

        if not pos_id or qty == 0 or sum_value == 0 or pos_status == "–û—Ç–º–µ–Ω–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º":
            log.info(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ (id={pos_id}, qty={qty}, —Å—É–º–º–∞={sum_value}, —Å—Ç–∞—Ç—É—Å={pos_status})")
            continue

        payload = {
            "userlogin": ABCP_USER,
            "userpsw": ABCP_PSW,
            "order[number]": order["number"],
            f"order[positions][{i}][id]": pos_id,
            f"order[positions][{i}][statusCode]": new_status_id
        }
        try:
            resp = requests.post(ABCP_ORDER_UPDATE_URL, data=payload)
            resp.raise_for_status()
            result = resp.json()
            if "errors" in result:
                log.warning(f"‚ö† –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ {pos_id} –∑–∞–∫–∞–∑–∞ {order['number']}: {result['errors']}")
            else:
                log.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è {pos_id} –≤ –∑–∞–∫–∞–∑–µ {order['number']} ‚Üí —Å—Ç–∞—Ç—É—Å {new_status_id}")
        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {pos_id}: {e}")

# === –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":    
    log_mapping_table()
    
    while True:
        try:
            log.info(f"\n=== üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===")

            TEST_MODE = False
            TEST_ORDER_NUMBER = None
            # TEST_ORDER_NUMBER = 205699637
            CUSTOM_START_DATE = "2025-03-01 00:00:00"
            CUSTOM_END_DATE = "2025-03-10 23:59:59"

            start, end = (CUSTOM_START_DATE, CUSTOM_END_DATE) if TEST_MODE else get_date_range()
            log.info(f"üîß {'–¢–ï–°–¢–û–í–´–ô' if TEST_MODE else '–ü—Ä–æ–¥–∞–∫—à–Ω'} —Ä–µ–∂–∏–º: –¥–∞—Ç—ã —Å {start} –ø–æ {end}")

            abcp_orders = fetch_abcp_orders(start, end)
            versta_orders = fetch_versta_orders()

            if not abcp_orders or not versta_orders:
                log.warning("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            else:
                common_ids, versta_by_customer_id = analyze_matches(abcp_orders, versta_orders, test_order=TEST_ORDER_NUMBER)
                abcp_statuses = build_abcp_status_map(abcp_orders)
                updates = find_orders_for_update(common_ids, abcp_statuses, versta_by_customer_id)

                log.info(f"\nüîÑ –ó–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: {len(updates)}")

                if updates:
                    log.info("\nüìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                    for u in updates:
                        log.info(f"  ‚û§ –ó–∞–∫–∞–∑ {u['order_id']} | ABCP: {u['abcp_current']} ‚Üí {u['abcp_new']} (ID {u['abcp_new_id']}) | Versta: {u['versta_status']}")
                        order_data = next((o for o in abcp_orders if str(o["number"]) == u["order_id"]), None)
                        if order_data:
                            update_abcp_order_positions(order_data, u["abcp_new_id"])
                        else:
                            log.warning(f"‚ùå –ó–∞–∫–∞–∑ {u['order_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ ABCP –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                else:
                    log.info("‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –∏–º–µ—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

        except Exception as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")

        log.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞...\n")
        time.sleep(180)